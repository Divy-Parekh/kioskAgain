/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/avatar.glb -o src/Components/Avatar.jsx -r public 
*/
import React, { useEffect, useMemo, useRef, useState } from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";
import { useAvatarStore } from "../store";

export function Avatar({ ...props }) {
  const { scene } = useGLTF("/models/avatar.glb");
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { audioData, visemeData } = useAvatarStore();
  
  const { animations: idleAnim } = useFBX("/animations/Idle.fbx");
  const { animations: talkingAnim } = useFBX("/animations/Talking.fbx");
  const { animations: greetAnim } = useFBX("/animations/Standing Greeting.fbx");

  idleAnim[0].name = "Idle";
  greetAnim[0].name = "Greeting";
  talkingAnim[0].name = "Talking";

  const group = useRef();
  const { actions } = useAnimations(
    [idleAnim[0], talkingAnim[0], greetAnim[0]],
    group
  );
  const audioElement = useRef(null);
  const currentVisemes = useRef([]);
  const messageCount = useRef(0); // Track number of audio messages

  const playAnimation = (name, fadeDuration = 0.3) => {
    if (!actions || !actions[name]) return;

    const nextAction = actions[name];

    Object.entries(actions).forEach(([key, action]) => {
      if (key !== name && action.isRunning()) {
        nextAction.reset().crossFadeFrom(action, fadeDuration, true).play();
      }
    });

    if (!nextAction.isRunning()) {
      nextAction.reset().play();
    }
  };

  // Initial greeting animation on mount
  useEffect(() => {
    if (messageCount.current === 0 && actions.Greeting && actions.Idle) {
      playAnimation("Greeting");

      const greetingDuration = actions.Greeting.getClip().duration * 1000;

      const timeout = setTimeout(() => {
        playAnimation("Idle");
      }, greetingDuration);

      return () => clearTimeout(timeout);
    }
  }, [actions]);

  // Handle audio + viseme + animation
  useEffect(() => {
    if (!audioData || !visemeData) {
      return;
    }

    if (audioElement.current) {
      audioElement.current.pause();
      audioElement.current = null;
    }

    const audio = new Audio(`data:audio/mp3;base64,${audioData}`);
    audioElement.current = audio;
    currentVisemes.current = visemeData;

    // Animation selection
    if (messageCount.current === 0) {
      playAnimation("Greeting");

      const greetingDuration = actions.Greeting.getClip().duration * 1000;

      setTimeout(() => {
        playAnimation("Talking");
        audio.play();
      }, greetingDuration);
    } else {
      playAnimation("Talking");
      audio.play();
    }

    messageCount.current++;

    audio.play();
    playAnimation("Talking");
    

    audio.onended = () => {
      playAnimation("Idle");
      currentVisemes.current = [];
    };
  }, [audioData, visemeData]);

  // Lip sync morphing + eye tracking
  useFrame(({ camera }) => {
    const audio = audioElement.current;
    if (!audio || !currentVisemes.current || !nodes.Wolf3D_Head) return;

    const currentTime = audio.currentTime;

    const resetInfluences = (morphDict, morphInfluences) => {
      Object.keys(morphDict).forEach((key) => {
        morphInfluences[morphDict[key]] = 0;
      });
    };

    resetInfluences(
      nodes.Wolf3D_Head.morphTargetDictionary,
      nodes.Wolf3D_Head.morphTargetInfluences
    );
    resetInfluences(
      nodes.Wolf3D_Teeth.morphTargetDictionary,
      nodes.Wolf3D_Teeth.morphTargetInfluences
    );

    for (const cue of currentVisemes.current) {
      if (currentTime >= cue.start && currentTime <= cue.end) {
        const { value } = cue;
        const idxHead = nodes.Wolf3D_Head.morphTargetDictionary[value];
        const idxTeeth = nodes.Wolf3D_Teeth.morphTargetDictionary[value];

        if (idxHead !== undefined)
          nodes.Wolf3D_Head.morphTargetInfluences[idxHead] = 1;
        if (idxTeeth !== undefined)
          nodes.Wolf3D_Teeth.morphTargetInfluences[idxTeeth] = 1;
        break;
      }
    }

    // Make eyes look at camera
    const worldPos = new THREE.Vector3();
    camera.getWorldPosition(worldPos);
    nodes.EyeLeft?.lookAt(worldPos);
    nodes.EyeRight?.lookAt(worldPos);
  });

  return (
    <group {...props} ref={group} dispose={null}>
      <primitive object={clone} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Glasses.geometry}
        material={materials.Wolf3D_Glasses}
        skeleton={nodes.Wolf3D_Glasses.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/models/avatar.glb");
